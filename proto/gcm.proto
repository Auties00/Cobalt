// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Logging information for Android "checkin" events (automatic, periodic
// requests made by Android devices to the server).

syntax = "proto2";

option optimize_for = LITE_RUNTIME;
option go_package = ".;checkin_proto";
package checkin_proto;

// Build characteristics unique to the Chrome browser, and Chrome OS
message ChromeBuildProto {
    enum Platform {
        PLATFORM_WIN = 1;
        PLATFORM_MAC = 2;
        PLATFORM_LINUX = 3;
        PLATFORM_CROS = 4;
        PLATFORM_IOS = 5;
        // Just a placeholder. Likely don't need it due to the presence of the
        // Android GCM on phone/tablet devices.
        PLATFORM_ANDROID = 6;
    }

    enum Channel {
        CHANNEL_STABLE = 1;
        CHANNEL_BETA = 2;
        CHANNEL_DEV = 3;
        CHANNEL_CANARY = 4;
        CHANNEL_UNKNOWN = 5;  // for tip of tree or custom builds
    }

    // The platform of the device.
    optional Platform platform = 1;

    // The Chrome instance's version.
    optional string chrome_version = 2;

    // The Channel (build type) of Chrome.
    optional Channel channel = 3;
}

// Information sent by the device in a "checkin" request.
message AndroidCheckinProto {
    // Miliseconds since the Unix epoch of the device's last successful checkin.
    optional int64 last_checkin_msec = 2;

    // The current MCC+MNC of the mobile device's current cell.
    optional string cell_operator = 6;

    // The MCC+MNC of the SIM card (different from operator if the
    // device is roaming, for instance).
    optional string sim_operator = 7;

    // The device's current roaming state (reported starting in eclair builds).
    // Currently one of "{,not}mobile-{,not}roaming", if it is present at all.
    optional string roaming = 8;

    // For devices supporting multiple user profiles (which may be
    // supported starting in jellybean), the ordinal number of the
    // profile that is checking in.  This is 0 for the primary profile
    // (which can't be changed without wiping the device), and 1,2,3,...
    // for additional profiles (which can be added and deleted freely).
    optional int32 user_number = 9;

    // Class of device.  Indicates the type of build proto
    // (IosBuildProto/ChromeBuildProto/AndroidBuildProto)
    // That is included in this proto
    optional DeviceType type = 12 [default = DEVICE_ANDROID_OS];

    // For devices running MCS on Chrome, build-specific characteristics
    // of the browser.  There are no hardware aspects (except for ChromeOS).
    // This will only be populated for Chrome builds/ChromeOS devices
    optional checkin_proto.ChromeBuildProto chrome_build = 13;

    // Note: Some of the Android specific optional fields were skipped to limit
    // the protobuf definition.
    // Next 14
}

// enum values correspond to the type of device.
// Used in the AndroidCheckinProto and Device proto.
enum DeviceType {
    // Android Device
    DEVICE_ANDROID_OS = 1;

    // Apple IOS device
    DEVICE_IOS_OS = 2;

    // Chrome browser - Not Chrome OS.  No hardware records.
    DEVICE_CHROME_BROWSER = 3;

    // Chrome OS
    DEVICE_CHROME_OS = 4;
}

// A concrete name/value pair sent to the device's Gservices database.
message GservicesSetting {
    required bytes name = 1;
    required bytes value = 2;
}

// Devices send this every few hours to tell us how they're doing.
message AndroidCheckinRequest {
    // IMEI (used by GSM phones) is sent and stored as 15 decimal
    // digits; the 15th is a check digit.
    optional string imei = 1;       // IMEI, reported but not logged.

    // MEID (used by CDMA phones) is sent and stored as 14 hexadecimal
    // digits (no check digit).
    optional string meid = 10;      // MEID, reported but not logged.

    // MAC address (used by non-phone devices).  12 hexadecimal digits;
    // no separators (eg "0016E6513AC2", not "00:16:E6:51:3A:C2").
    repeated string mac_addr = 9;   // MAC address, reported but not logged.

    // An array parallel to mac_addr, describing the type of interface.
    // Currently accepted values: "wifi", "ethernet", "bluetooth".  If
    // not present, "wifi" is assumed.
    repeated string mac_addr_type = 19;

    // Serial number (a manufacturer-defined unique hardware
    // identifier).  Alphanumeric, case-insensitive.
    optional string serial_number = 16;

    // Older CDMA networks use an ESN (8 hex digits) instead of an MEID.
    optional string esn = 17;       // ESN, reported but not logged

    optional int64 id = 2;          // Android device ID, not logged
    optional int64 logging_id = 7;  // Pseudonymous logging ID for Sawmill
    optional string digest = 3;     // Digest of device provisioning, not logged.
    optional string locale = 6;     // Current locale in standard (xx_XX) format
    required AndroidCheckinProto checkin = 4;

    // DEPRECATED, see AndroidCheckinProto.requested_group
    optional string desired_build = 5;

    // Blob of data from the Market app to be passed to Market API server
    optional string market_checkin = 8;

    // SID cookies of any google accounts stored on the phone.  Not logged.
    repeated string account_cookie = 11;

    // Time zone.  Not currently logged.
    optional string time_zone = 12;

    // Security token used to validate the checkin request.
    // Required for android IDs issued to Froyo+ devices, not for legacy IDs.
    optional fixed64 security_token = 13;

    // Version of checkin protocol.
    //
    // There are currently two versions:
    //
    // - version field missing: android IDs are assigned based on
    //   hardware identifiers.  unsecured in the sense that you can
    //   "unregister" someone's phone by sending a registration request
    //   with their IMEI/MEID/MAC.
    //
    // - version=2: android IDs are assigned randomly.  The device is
    //   sent a security token that must be included in all future
    //   checkins for that android id.
    //
    // - version=3: same as version 2, but the 'fragment' field is
    //   provided, and the device understands incremental updates to the
    //   gservices table (ie, only returning the keys whose values have
    //   changed.)
    //
    // (version=1 was skipped to avoid confusion with the "missing"
    // version field that is effectively version 1.)
    optional int32 version = 14;

    // OTA certs accepted by device (base-64 SHA-1 of cert files).  Not
    // logged.
    repeated string ota_cert = 15;

    // Honeycomb and newer devices send configuration data with their checkin.
    // optional DeviceConfigurationProto device_configuration = 18;

    // A single CheckinTask on the device may lead to multiple checkin
    // requests if there is too much log data to upload in a single
    // request.  For version 3 and up, this field will be filled in with
    // the number of the request, starting with 0.
    optional int32 fragment = 20;

    // For devices supporting multiple users, the name of the current
    // profile (they all check in independently, just as if they were
    // multiple physical devices).  This may not be set, even if the
    // device is using multiuser.  (checkin.user_number should be set to
    // the ordinal of the user.)
    optional string user_name = 21;

    // For devices supporting multiple user profiles, the serial number
    // for the user checking in.  Not logged.  May not be set, even if
    // the device supportes multiuser.  checkin.user_number is the
    // ordinal of the user (0, 1, 2, ...), which may be reused if users
    // are deleted and re-created.  user_serial_number is never reused
    // (unless the device is wiped).
    optional int32 user_serial_number = 22;

    // NEXT TAG: 23
}

// The response to the device.
message AndroidCheckinResponse {
    required bool stats_ok = 1;    // Whether statistics were recorded properly.
    optional int64 time_msec = 3;  // Time of day from server (Java epoch).
  // repeated AndroidIntentProto intent = 2;

    // Provisioning is sent if the request included an obsolete digest.
    //
    // For version <= 2, 'digest' contains the digest that should be
    // sent back to the server on the next checkin, and 'setting'
    // contains the entire gservices table (which replaces the entire
    // current table on the device).
    //
    // for version >= 3, 'digest' will be absent.  If 'settings_diff'
    // is false, then 'setting' contains the entire table, as in version
    // 2.  If 'settings_diff' is true, then 'delete_setting' contains
    // the keys to delete, and 'setting' contains only keys to be added
    // or for which the value has changed.  All other keys in the
    // current table should be left untouched.  If 'settings_diff' is
    // absent, don't touch the existing gservices table.
    //
    optional string digest = 4;
    optional bool settings_diff = 9;
    repeated string delete_setting = 10;
    repeated GservicesSetting setting = 5;

    optional bool market_ok = 6;   // If Market got the market_checkin data OK.

    optional fixed64 android_id = 7;      // From the request, or newly assigned
    optional fixed64 security_token = 8;  // The associated security token

    optional string version_info = 11;
    // NEXT TAG: 12
}

message HeartbeatPing {
    optional int32 stream_id = 1;
    optional int32 last_stream_id_received = 2;
    optional int64 status = 3;
}

/**
  TAG: 1
  */
message HeartbeatAck {
    optional int32 stream_id = 1;
    optional int32 last_stream_id_received = 2;
    optional int64 status = 3;
}

message ErrorInfo {
    required int32 code = 1;
    optional string message = 2;
    optional string type = 3;
    optional  Extension extension = 4;
}

// MobileSettings class.
// "u:f", "u:b", "u:s" - multi user devices reporting foreground, background
// and stopped users.
// hbping: heatbeat ping interval
// rmq2v: include explicit stream IDs

message Setting {
    required string name = 1;
    required string value = 2;
}

message HeartbeatStat {
    required string ip = 1;
    required bool timeout = 2;
    required int32 interval_ms = 3;
}

message HeartbeatConfig {
    optional bool upload_stat = 1;
    optional string ip = 2;
    optional int32 interval_ms = 3;
}

// ClientEvents are used to inform the server of failed and successful
// connections.
message ClientEvent {
    enum Type {
        UNKNOWN = 0;
        // Count of discarded events if the buffer filled up and was trimmed.
        DISCARDED_EVENTS = 1;
        // Failed connection event: the connection failed to be established or we
        // had a login error.
        FAILED_CONNECTION = 2;
        // Successful connection event: information about the last successful
        // connection, including the time at which it was established.
        SUCCESSFUL_CONNECTION = 3;
    }

    // Common fields [1-99]
    optional Type type = 1;

    // Fields for DISCARDED_EVENTS messages [100-199]
    optional uint32 number_discarded_events = 100;

    // Fields for FAILED_CONNECTION and SUCCESSFUL_CONNECTION messages [200-299]
    // Network type is a value in net::NetworkChangeNotifier::ConnectionType.
    optional int32 network_type = 200;
    // Reserved for network_port.
    reserved 201;
    optional uint64 time_connection_started_ms = 202;
    optional uint64 time_connection_ended_ms = 203;
    // Error code should be a net::Error value.
    optional int32 error_code = 204;

    // Fields for SUCCESSFUL_CONNECTION messages [300-399]
    optional uint64 time_connection_established_ms = 300;
}

/**
  TAG: 2
  */
message LoginRequest {
    enum AuthService {
        ANDROID_ID = 2;
    }
    required string id = 1; // Must be present ( proto required ), may be empty
                          // string.
  // mcs.android.com.
    required string domain = 2;
    // Decimal android ID
    required string user = 3;

    required string resource = 4;

    // Secret
    required string auth_token = 5;

    // Format is: android-HEX_DEVICE_ID
    // The user is the decimal value.
    optional string device_id = 6;

    // RMQ1 - no longer used
    optional int64 last_rmq_id = 7;

    repeated Setting setting = 8;
    //optional int32 compress = 9;
    repeated string received_persistent_id = 10;

    // Replaced by "rmq2v" setting
    // optional bool include_stream_ids = 11;

    optional bool adaptive_heartbeat = 12;
    optional HeartbeatStat heartbeat_stat = 13;
    // Must be true.
    optional bool use_rmq2 = 14;
    optional int64 account_id = 15;

    // ANDROID_ID = 2
    optional AuthService auth_service = 16;

    optional int32 network_type = 17;
    optional int64 status = 18;

    // 19, 20, and 21 are not currently populated by Chrome.
    reserved 19, 20, 21;

    // Events recorded on the client after the last successful connection.
    repeated ClientEvent client_event = 22;
}

/**
  * TAG: 3
  */
message LoginResponse {
    required string id = 1;
    // Not used.
    optional string jid = 2;
    // Null if login was ok.
    optional ErrorInfo error = 3;
    repeated Setting setting = 4;
    optional int32 stream_id = 5;
    // Should be "1"
    optional int32 last_stream_id_received = 6;
    optional HeartbeatConfig heartbeat_config = 7;
    // used by the client to synchronize with the server timestamp.
    optional int64 server_timestamp = 8;
}

message StreamErrorStanza {
    required string type = 1;
    optional string text = 2;
}

/**
  * TAG: 4
  */
message Close {
}

message Extension {
    // 12: SelectiveAck
    // 13: StreamAck
    required int32 id = 1;
    required bytes data = 2;
}

/**
  * TAG: 7
  * IqRequest must contain a single extension.  IqResponse may contain 0 or 1
  * extensions.
  */
message IqStanza {
    enum IqType {
        GET = 0;
        SET = 1;
        RESULT = 2;
        IQ_ERROR = 3;
    }

    optional int64 rmq_id = 1;
    required IqType type = 2;
    required string id = 3;
    optional string from = 4;
    optional string to = 5;
    optional ErrorInfo error = 6;

    // Only field used in the 38+ protocol (besides common last_stream_id_received, status, rmq_id)
    optional Extension extension = 7;

    optional string persistent_id = 8;
    optional int32 stream_id = 9;
    optional int32 last_stream_id_received = 10;
    optional int64 account_id = 11;
    optional int64 status = 12;
}

message AppData {
    required string key = 1;
    required string value = 2;
}

/**
 * TAG: 8
 */
message DataMessageStanza {
    // Not used.
    // optional int64 rmq_id = 1;

    // This is the message ID, set by client, DMP.9 (message_id)
    optional string id = 2;

    // Project ID of the sender, DMP.1
    required string from = 3;

    // Part of DMRequest - also the key in DataMessageProto.
    optional string to = 4;

    // Package name. DMP.2
    required string category = 5;

    // The collapsed key, DMP.3
    optional string token = 6;

    // User data + GOOGLE. prefixed special entries, DMP.4
    repeated AppData app_data = 7;

    // Not used.
    optional bool from_trusted_server = 8;

    // Part of the ACK protocol, returned in DataMessageResponse on server side.
    // It's part of the key of DMP.
    optional string persistent_id = 9;

    // In-stream ack. Increments on each message sent - a bit redundant
    // Not used in DMP/DMR.
    optional int32 stream_id = 10;
    optional int32 last_stream_id_received = 11;

    // Not used.
    // optional string permission = 12;

    // Sent by the device shortly after registration.
    optional string reg_id = 13;

    // Not used.
    // optional string pkg_signature = 14;
    // Not used.
    // optional string client_id = 15;

    // serial number of the target user, DMP.8
    // It is the 'serial number' according to user manager.
    optional int64 device_user_id = 16;

    // Time to live, in seconds.
    optional int32 ttl = 17;
    // Timestamp ( according to client ) when message was sent by app, in seconds
    optional int64 sent = 18;

    // How long has the message been queued before the flush, in seconds.
    // This is needed to account for the time difference between server and
    // client: server should adjust 'sent' based on its 'receive' time.
    optional int32 queued = 19;

    optional int64 status = 20;

    // Optional field containing the binary payload of the message.
    optional bytes raw_data = 21;

    // Not used.
    // The maximum delay of the message, in seconds.
    // optional int32 max_delay = 22;

    // Not used.
    // How long the message was delayed before it was sent, in seconds.
    // optional int32 actual_delay = 23;

    // If set the server requests immediate ack. Used for important messages and
    // for testing.
    optional bool immediate_ack = 24;

    // Not used.
    // Enables message receipts from MCS/GCM back to CCS clients
    // optional bool delivery_receipt_requested = 25;
}

/**
  Included in IQ with ID 13, sent from client or server after 10 unconfirmed
  messages.
 */
message StreamAck {
    // No last_streamid_received required.  This is included within an IqStanza,
    // which includes the last_stream_id_received.
}

/**
  Included in IQ sent after LoginResponse from server with ID 12.
*/
message SelectiveAck {
    repeated string id = 1;
}